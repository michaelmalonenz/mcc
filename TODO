Misc:
write a ruby script to replace all tri-graphs in c code OR
add in a compile-time switched ability to handle tri-graphs (so I can eventually claim full c99 compliance)
options
Use stopper for the unit tests??

Unit Tests I really should write:
test_Tokeniser //extend and make more complex situations
test_Macros // I still need to write a test which deletes a macro in the middle of the tree somewhere 
            // and maintains the integrity.  Perhaps I should write a function that asserts the invariant.
test_Preprocessor

Config:
Start adding some more options and potentially make (with some macro magic?) a better way to add new options

Preprocessor:
change the macro definitions to be a hash table?  It seems unnecessarily limiting to do it this way.
Fix the b-tree after a macro deletion
 - Maybe just dump the b-tree implementation altogether?  It's slower for search and insert.
macro replacement
evaluate macro expressions (like #if etc)
 - Create an Integer Constant Expression parser/evaluator module?
support function macros
Need to handle the ## operator
handle if-like constructs

Tokeniser:
handle constant numbers better (floating point, decimal, octal and hex!)
 - suffixes, etc

Parser:
Assert that the input file conforms to the c(99) standard
create an AST
walk the tree
output an intermediate representation

Assembler
output ELF files and DWARF (4?)

linker - (Do I actually want to write this myself or should I attempt to write object files which are compatible with binutils' linker/gold and use that?)
Do I want to distribute a C library (like uClibc or Newlib etc) with this? probably.
